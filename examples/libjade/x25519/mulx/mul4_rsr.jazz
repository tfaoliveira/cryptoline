inline fn __reduce4
( reg u64[4] h,
  reg u64[4] r,
  reg u64 _38,
  reg u64 z,     // zero
  reg bool cf of // cf = 0 and of = 0
) -> reg u64[4]
{
  inline int i;
  reg u64 hi lo;

  //
  ( hi, lo )   = #MULX ( _38,  r[0] );
  of, h[0]     = #ADOX ( h[0], lo, of );
  cf, h[1]     = #ADCX ( h[1], hi, cf );

  ( hi, lo )   = #MULX ( _38,  r[1] );
  of, h[1]     = #ADOX ( h[1], lo, of );
  cf, h[2]     = #ADCX ( h[2], hi, cf );

  ( hi, lo )   = #MULX ( _38,  r[2] );
  of, h[2]     = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( r[0], lo ) = #MULX ( _38, r[3] );
  of, h[3]     = #ADOX ( h[3], lo, of );

  cf, r[0]     = #ADCX ( r[0], z, cf ); 
  of, r[0]     = #ADOX ( r[0], z, of );

  //
  _,_,_,_,_,lo = #IMULri ( r[0], 38 );

  cf, h[0] += lo;
  cf, h[1] += z + cf;
  cf, h[2] += z + cf;
  cf, h[3] += z + cf;

  _, z -= z - cf;
  z &= 38;
  h[0] += z;

  return h;
}

inline fn __mul4_c0
( reg u64    f0,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;
  reg u64[4] h r;

  (h[1], h[0]) = #MULX ( f0, g[0] );

  ( h[2], lo ) = #MULX ( f0, g[1] );
    cf, h[1]   = #ADCX ( h[1], lo, cf );

  ( h[3], lo ) = #MULX ( f0, g[2] );
    cf, h[2]   = #ADCX ( h[2], lo, cf );

  ( r[0], lo ) = #MULX ( f0, g[3] );
    cf, h[3]   = #ADCX ( h[3], lo, cf );

  cf, r[0] = #ADCX ( r[0], z, cf ); // cf = 0

  return h, r, cf, of;
}

inline fn __mul4_c1
( reg u64[4] h,
  reg u64[4] r,
  reg u64    f,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;

  ( hi, lo )   = #MULX ( f, g[0] );
  of, h[1]     = #ADOX ( h[1], lo, of );
  cf, h[2]     = #ADCX ( h[2], hi, cf );

  ( hi, lo )   = #MULX ( f, g[1] );
  of, h[2]     = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( hi, lo )   = #MULX ( f, g[2] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  cf, r[0]     = #ADCX ( r[0], hi, cf );

  ( r[1], lo ) = #MULX ( f, g[3] );
  of, r[0]     = #ADOX ( r[0], lo, of);

  cf, r[1]     = #ADCX ( r[1], z, cf);
  of, r[1]     = #ADOX ( r[1], z, of);

  return h, r, cf, of;
}

inline fn __mul4_c2
( reg u64[4] h,
  reg u64[4] r,
  reg u64    f,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;

  ( hi, lo )   = #MULX ( f, g[0] );
  of, h[2]     = #ADOX ( h[2], lo, of );
  cf, h[3]     = #ADCX ( h[3], hi, cf );

  ( hi, lo )   = #MULX ( f, g[1] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  cf, r[0]     = #ADCX ( r[0], hi, cf );

  ( hi, lo )   = #MULX ( f, g[2] );
  of, r[0]     = #ADOX ( r[0], lo, of );
  cf, r[1]     = #ADCX ( r[1], hi, cf );

  ( r[2], lo ) = #MULX ( f, g[3] );
  of, r[1]     = #ADOX ( r[1], lo, of);

  cf, r[2]     = #ADCX ( r[2], z, cf);
  of, r[2]     = #ADOX ( r[2], z, of);

  return h, r, cf, of;
}

inline fn __mul4_c3
( reg u64[4] h,
  reg u64[4] r,
  reg u64    f,
  reg u64[4] g,
  reg u64    z, // zero
  reg bool   cf of // cf = 0 and of = 0
  ) ->
  reg u64[4],
  reg u64[4],
  reg bool,
  reg bool
{
  inline int i;
  reg u64 hi lo;

  ( hi, lo )   = #MULX ( f, g[0] );
  of, h[3]     = #ADOX ( h[3], lo, of );
  cf, r[0]     = #ADCX ( r[0], hi, cf );

  ( hi, lo )   = #MULX ( f, g[1] );
  of, r[0]     = #ADOX ( r[0], lo, of );
  cf, r[1]     = #ADCX ( r[1], hi, cf );

  ( hi, lo )   = #MULX ( f, g[2] );
  of, r[1]     = #ADOX ( r[1], lo, of );
  cf, r[2]     = #ADCX ( r[2], hi, cf );

  ( r[3], lo ) = #MULX ( f, g[3] );
  of, r[2]     = #ADOX ( r[2], lo, of);

  cf, r[3]     = #ADCX ( r[3], z, cf);
  of, r[3]     = #ADOX ( r[3], z, of);

  return h, r, cf, of;
}

inline fn __mul4_rsr(stack u64[4] fs, reg u64[4] g) -> reg u64[4]
{
  reg bool cf of;
  reg u64[4] h r;
  reg u64 _38 f z;

  of, cf, _, _, _, z = #set0();

  f = fs[0];
  h, r, cf, of = __mul4_c0(      f, g, z, cf, of);

  f = fs[1];
  h, r, cf, of = __mul4_c1(h, r, f, g, z, cf, of);

  f = fs[2];
  h, r, cf, of = __mul4_c2(h, r, f, g, z, cf, of);

  f = fs[3];
  h, r, cf, of = __mul4_c3(h, r, f, g, z, cf, of);

  _38 = 38;
  h = __reduce4(h, r, _38, z, cf, of);

  return h;
}

//

export fn mul4_rsr(reg u64 rp fp gp)
{
  inline int i;
  reg u64[4] r f g;
  stack u64[4] fs;
  stack u64 rps;

  rps = rp;
  for i=0 to 4
  { f[i] = [fp + 8*i];
    g[i] = [gp + 8*i];
  }

  fs = #copy(f);

  r = __mul4_rsr(fs, g);

  rp = rps;
  for i=0 to 4
  { [rp + 8*i] = r[i]; }
}

